dir: &dir
  working_directory: ~/igvc-firmware

image: &image
  docker:
    - image: robojackets/igvc-firmware:latest

save_src_cache: &save_src_cache
  save_cache:
    key: source-v1-{{ .Branch }}-{{ .Revision }}
    paths:
      - ".git"
load_src_cache: &load_src_cache
  restore_cache:
    keys:
      - source-v1-{{ .Branch }}-{{ .Revision }}
      - source-v1-{{ .Branch }}-
      - source-v1-
save_compile_cache: &save_compile_cache
  save_cache:
    key: ccache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - ~/.ccache
load_compile_cache: &load_compile_cache
  restore_cache:
    keys:
      - ccache-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - ccache-{{ arch }}-{{ .Branch }}
      - ccache-{{ arch }}
      - ccache-
save_test_cache: &save_test_cache
  save_cache:
    key: ccache-test-{{ arch }}-{{ .Branch }}-{{ .Revision }}
    paths:
      - ~/.ccache
load_test_cache: &load_test_cache
  restore_cache:
    keys:
      - ccache-test-{{ arch }}-{{ .Branch }}-{{ .Revision }}
      - ccache-test-{{ arch }}-{{ .Branch }}
      - ccache-test-{{ arch }}
      - ccache-test-

version: 2
jobs:
  compile:
    <<: *dir
    <<: *image
    steps:
      - <<: *load_src_cache
      - checkout:
          path: ~/igvc-firmware
      - run:
          name: "Checkout Submodules"
          command: |
            git submodule init
            git submodule update
      - <<: *save_src_cache
      - <<: *load_compile_cache
      - run:
          name: Creating Build Files
          command: cmake -H. -GNinja -Bbuild
      - run:
          name: Building binaries
          command: cmake --build build
      - <<: *save_compile_cache
      - store_artifacts:
          path: ~/igvc-firmware/build/igvc-firmware.bin
  test:
    <<: *dir
    <<: *image
    steps:
      - <<: *load_src_cache
      - checkout:
          path: ~/igvc-firmware
      - <<: *save_src_cache
      - <<: *load_test_cache
      - <<: *save_test_cache
#  format:
#    working_directory: ~/catkin_ws/src/igvc-software
#    <<: *image
#    steps:
#      - <<: *load_src_cache
#      - checkout:
#          path: ~/catkin_ws/src/igvc-software
#      - <<: *save_src_cache
#      - run: |
#          apt-get update -y
#          apt-get install -y clang-format-6.0
#          ln -s /usr/bin/clang-format-6.0 /usr/bin/clang-format
#          clang-format -dump-config
#          SOURCE_FILES=`find . -name '*.h' -or -name '*.hpp' -or -name '*.cpp' -not -path "./external/*"`
#          for SOURCE_FILE in $SOURCE_FILES
#          do
#            export FORMATTING_ISSUE_COUNT=`clang-format -output-replacements-xml $SOURCE_FILE | grep offset | wc -l`
#            if [ "$FORMATTING_ISSUE_COUNT" -gt "0" ]; then
#              echo "Source file $SOURCE_FILE contains formatting issues. Please use clang-format tool to resolve found issues."
#              exit 1
#            fi
#          done

workflows:
  version: 2
  build_and_test:
    jobs:
      - compile
      - test:
          requires:
            - compile
